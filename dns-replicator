#!/usr/bin/python3
import yaml
import dns.query
import dns.zone
import dns.tsigkeyring
import dns.resolver

import argparse
import re

# name resolution
import socket
# nsupdate
import tempfile
import subprocess


def parse_arguments():
    parser = argparse.ArgumentParser(description="replicate DNS zones with AXFR and nsupdate")
    parser.add_argument("-v", action="count", default=0, help="Setzt das Debug-Level (-v für Debug, -vv für ausführlichere Ausgabe)")
    return parser.parse_args()
args = parse_arguments()

debug_level = args.v
def debug_print(level, message):
    if debug_level >= level:
        print(message)

def load_config(file="/etc/dns-replicator/config.yml"):
    with open(file, "r") as f:
        return yaml.safe_load(f)

config = load_config()

def load_secret(secret_file):
    debug_print(3, f"DEBUG: load secret from {secret_file}")
    try:
        with open(secret_file, "r") as f:
            content = f.read()
        match = re.search(r'secret\s+"([^"]+)"', content)
        if match:
            return match.group(1)
    except Exception as e:
        print(f"ERROR: unable to load secret keys from {secret_file}: {e}")
    return None

def get_soa_dns_server(domain, dns_server):
    debug_print(3, f"DEBUG: get dns server from soa for {domain}")
    try:
        resolver = dns.resolver.Resolver()
        resolver.nameservers = [dns_server]
        answer = resolver.resolve(domain, "SOA")
        return answer[0].mname.to_text()  # SOA-mname is primary dns server
    except Exception as e:
        debug_print(2, f"ERROR: unable to get SOA-record for domain {domain}: {e}")
        return None

def get_zone_data(domain, dns_server, key_name, secret_file):
    debug_print(3, f"DEBUG: get zone data for domain {domain} from server {dns_server}")
    tsig_secret = load_secret(secret_file)
    if not tsig_secret:
        print(f"ERROR: TSIG-Secret for {domain} can't be loaded.")
        return None

    debug_print(4, f"DEBUG: get zone data for domain {domain} from server {dns_server} with key {key_name} tsig_secret {tsig_secret}")

    keyring = dns.tsigkeyring.from_text({key_name: tsig_secret})
    debug_print(5, f"keyring={keyring}")
    try:
        zone_transfer = dns.query.xfr(socket.gethostbyname(dns_server), domain, keyring=keyring, keyname=key_name, keyalgorithm="hmac-sha512")
        return dns.zone.from_xfr(zone_transfer)
    except Exception as e:
        print(f"ERROR: AXFR failed for domain {domain}: {e}")
        return None

def sync_zone(source_zone, target_zone, target_domain, target_server, key_name, secret_file):
    tsig_secret = load_secret(secret_file)
    if not tsig_secret:
        print(f"ERROR: unable to load secret for {target_domain}.")
        return

    keyring = dns.tsigkeyring.from_text({key_name: tsig_secret})

    temp = tempfile.NamedTemporaryFile(mode="w+", prefix='nsupdate_')
    temp.write(f"zone {target_domain}\n")

    debug_print(5, f"Source zone items {source_zone.nodes.items()}")
    for source_record_name, source_record_rdataset in source_zone.iterate_rdatasets():
        if f"{source_record_name}" == "@":
            continue
        debug_print(4, source_record_name)
        debug_print(4, f"HANDLE \t{source_record_rdataset}")
        for source_record_rdataset_line in source_record_rdataset.to_text().split("\n"):
            source_record_fields = source_record_rdataset_line.split(" ", 4)
            try:
                target_record_rdataset = target_zone.find_rdataset(name=source_record_name, rdtype=source_record_fields[2], create=False)
            except KeyError:
                target_record_rdataset = None

            if not target_record_rdataset:
                debug_print(3,f"update add {source_record_name}.{target_domain}. {source_record_rdataset_line}")
                temp.write(f"update add {source_record_name}.{target_domain}. {source_record_rdataset_line}\n")
            else:
                if source_record_rdataset.to_text() in target_record_rdataset.to_text().split("\n"):
                    debug_print(3, f"GOOD: {source_record_name}.{target_domain} {source_record_rdataset_line}")
                    continue
                else:
                    debug_print(3,f"update add {source_record_name}.{target_domain}. {source_record_rdataset_line}")
                    temp.write(f"update add {source_record_name}.{target_domain}. {source_record_rdataset_line}\n")

    for target_record_name, target_record_rdataset in target_zone.iterate_rdatasets():
        if f"{target_record_name}" == "@":
            continue
        debug_print(4, target_record_name)
        debug_print(4, f"HANDLE \t{target_record_rdataset}")
        for target_record_rdataset_line in target_record_rdataset.to_text().split("\n"):
            target_record_fields = target_record_rdataset_line.split(" ", 4)
            try:
                source_record_rdataset = source_zone.find_rdataset(name=target_record_name, rdtype=target_record_fields[2], create=False)
            except KeyError:
                source_record_rdataset = None

            if not source_record_rdataset:
                debug_print(3,f"update delete {target_record_name}.{target_domain}. {target_record_rdataset_line}")
                temp.write(f"update delete {target_record_name}.{target_domain}. {target_record_rdataset_line}\n")
            else:
                if target_record_rdataset_line not in source_record_rdataset.to_text().split("\n"):
                    debug_print(3,f"update delete {target_record_name}.{target_domain}. {target_record_rdataset_line}")
                    temp.write(f"update delete {target_record_name}.{target_domain}. {target_record_rdataset_line}\n")

    temp.write(f"send\n")
    temp.write(f"answer\n")
    temp.seek(0)
    res = subprocess.run([ "/usr/bin/nsupdate", "-k", secret_file, "-t", "10", temp.name, "-d" ], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    if debug_level > 0:
        print(temp.read())
    if debug_level > 1:
        print(f"{res}")
    temp.close()

# Source domain: load secret
source_tsig_secret = load_secret(config.get('tsig_key_secret_file'))
if not source_tsig_secret:
    print(f"ERROR: unable to load TSIG-secret of source_domain {config.get('tsig_key_secret_file')}")
    exit(1)

source_keyring = dns.tsigkeyring.from_text({config.get('tsig_key_name'): source_tsig_secret})

def main():

    dns_server = config.get('dns_server', dns.resolver.Resolver().nameservers[0])
    source_domain_dns_server = config.get('source_domain_dns_server',get_soa_dns_server(config.get('source_domain'),dns_server))

    source_zone = get_zone_data(config.get("source_domain"), source_domain_dns_server, config.get('tsig_key_name'), config.get('tsig_key_secret_file'))

    if not source_zone:
        print(f"ERROR: unable to loead zone data for {config['source_domain']}.")
        return

    for target in config.get('target_domains'):
        target_dns_server = target.get("dns_server",get_soa_dns_server(target['domain'], dns_server))
        debug_print(2, f"target {target['domain']} DNS {target_dns_server}")

        if target_dns_server:
            target_zone = get_zone_data(target["domain"], target_dns_server, target["tsig_key_name"], target["tsig_key_secret_file"])
            if target_zone:
                sync_zone(source_zone, target_zone, target["domain"], target_dns_server, target["tsig_key_name"], target["tsig_key_secret_file"])
                debug_print(2,f"Replication completed: {config['source_domain']} → {target['domain']}")
            else:
                print(f"ERROR: unable to loead zone data for {target['domain']}.")
        else:
            print(f"ERROR: unable to find dns server for {target['domain']}.")

if __name__ == "__main__":
    main()

# vim: set tabstop=4 shiftwidth=4 expandtab autoindent smartindent:
